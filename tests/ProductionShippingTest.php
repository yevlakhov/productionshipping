<?php

class ProductionShippingTest extends PHPUnit_Framework_TestCase
{

    protected $prodshipp;
    protected $helperForm;
    protected $tabObject;
    
    protected function setUp()
    {
        //Mock HelperForm
        $helperForm = $this->getMockBuilder('HelperForm')
            ->getMock();
        $helperForm->method('generateForm')
            ->willReturn('Here is should be some html');
        $this->helperForm = $helperForm;
        
        $testController = $this->getMockBuilder('AdminModulesController')
            ->getMock();
        $testController->method('getLanguages')
            ->willReturn([1]);
        
        $this->tabObject = $this->getMockBuilder('Tab')
            ->getMock();
        $this->tabObject->method('save')
            ->willReturn(true);
        $this->tabObject->method('delete')
            ->willReturn(true);
        
        $this->prodshipp = new Productionshipping($this->helperForm, $this->tabObject);
        $this->prodshipp->testEnv = true;
        $this->prodshipp->controller = $testController;
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
    
    public function testConstructorWithoutParameters()
    {
        $prodshipp = new Productionshipping();
        $this->assertEquals(true, $prodshipp instanceof Productionshipping);
    }
    
    public function testConstructorWithAnotehrTypeParameters()
    {
        $someClass = new ReflectionClass('SomeClass');
        $someObj = $someClass->newInstance();
        
        try {
            $prodshipp = new Productionshipping($someObj);
            $this->fail();
        } catch (Exception $e) {
            $this->assertEquals(4096, $e->getCode(), 'Fail type checking');
        }
    }
    
    public function testRenderForm()
    {
        $res = $this->prodshipp->renderForm();
        $this->assertEquals('Here is should be some html', $res);
    }
    
    public function testTplFolder()
    {
        $this->assertFileExists($this->prodshipp->teplateFolder);
    }
    
    public function testGetOutput()
    {
        $output = $this->prodshipp->getOutput($this->prodshipp->teplateFolder.'admin/configure.tpl');
        $this->assertContains('<h3><i class="icon icon-credit-card"></i>', $output);
    }
    
    public function testGetOutputBlankParameter()
    {
        $output = $this->prodshipp->getOutput();
        $this->assertEquals(false, $output);
    }
    
    public function testGetContent()
    {
        $_GET['submitProductionshippingModule'] = true;
        $output = $this->prodshipp->getContent();
        $this->assertContains('<h3><i class="icon icon-credit-card"></i>', $output);
    }
    
    public function testUpdateConfigValue()
    {
        $this->prodshipp->testEnv = false;
        $this->prodshipp->updateConfigValue('TEST_CONFIG_VALUE', 'some value');
        $value = Configuration::get('TEST_CONFIG_VALUE');
        $this->assertEquals('some value', $value);
        $this->prodshipp->testEnv = true;
    }
    
    public function testGetConfigForm()
    {
        $aForm = $this->prodshipp->getConfigForm();
        $configName = $aForm['form']['input'][0]['name'];
        $this->assertEquals('SENDING_DAY', $configName);
    }
    
    public function testSetTabParams()
    {
        $res = $this->prodshipp->setTabParams('AdminProduction', array(1=>'Production'), 10);
        $this->assertEquals(true, $res);
        $resWithoutParams = $this->prodshipp->setTabParams();
        $this->assertEquals(false, $resWithoutParams);
    }
}
